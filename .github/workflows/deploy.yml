name: Deploy to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
      
      # Create a .env file with secrets
      - name: Create env file
        run: |
          touch .env
          echo VITE_FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }} >> .env
          echo VITE_FIREBASE_AUTH_DOMAIN=${{ secrets.FIREBASE_AUTH_DOMAIN }} >> .env
          echo VITE_FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }} >> .env
          echo VITE_FIREBASE_STORAGE_BUCKET=${{ secrets.FIREBASE_STORAGE_BUCKET }} >> .env
          echo VITE_FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }} >> .env
          echo VITE_FIREBASE_APP_ID=${{ secrets.FIREBASE_APP_ID }} >> .env
          echo VITE_FIREBASE_MEASUREMENT_ID=${{ secrets.FIREBASE_MEASUREMENT_ID }} >> .env
          echo VITE_PIXABAY_API_KEY=${{ secrets.PIXABAY_API_KEY }} >> .env
          echo VITE_CLOUDINARY_CLOUD_NAME=${{ secrets.CLOUDINARY_CLOUD_NAME }} >> .env
          echo VITE_CLOUDINARY_UPLOAD_PRESET=${{ secrets.CLOUDINARY_UPLOAD_PRESET }} >> .env
        
      - name: Build
        run: npm run build
        
      - name: Setup Pages
        uses: actions/configure-pages@v4
        # Removed enablement parameter - rely on manual GitHub Pages setup
        
      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'

  test:
    name: Run Playwright Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Compose Build
        run: docker compose build

      - name: Start Docker services
        run: NODE_ENV=test docker compose up -d
        env:
          NODE_ENV: test

      - name: Wait for services to be ready
        run: sleep 20

      - name: Build application in container
        run: docker compose exec -T frontend npm run build
        env:
          NODE_ENV: test

      - name: Run Playwright tests in container
        run: docker compose exec -T frontend npm run test
        env:
          CI: true
          NODE_ENV: test

      - name: Save test reports
        if: always()
        run: |
          mkdir -p playwright-report test-results
          docker cp $(docker compose ps -q frontend):/app/playwright-report/. ./playwright-report/ || true
          docker cp $(docker compose ps -q frontend):/app/test-results/. ./test-results/ || true
          # Apply permissions only after files are copied to the runner
          chmod -R 777 playwright-report test-results || true
        env:
          NODE_ENV: test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: |
            playwright-report/
            test-results/
          retention-days: 30

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

